// <auto-generated />
using System;
using Melodix.MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodix.MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250704034727_v2-postgres")]
    partial class v2postgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodix.Modelos.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaLanzamiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpotifyAlbumId")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlPortada")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodix.Modelos.Artista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifyArtistaId")
                        .HasColumnType("text");

                    b.Property<string>("UrlImagen")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artistas");
                });

            modelBuilder.Entity("Melodix.Modelos.HistorialEscucha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EscuchadaEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PistaId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HistorialEscuchas");
                });

            modelBuilder.Entity("Melodix.Modelos.HistorialLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccionLike")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ObjetoId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoObjetoLike")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HistorialLikes");
                });

            modelBuilder.Entity("Melodix.Modelos.ListaPista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AgregadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ListaId")
                        .HasColumnType("integer");

                    b.Property<int?>("PistaId")
                        .HasColumnType("integer");

                    b.Property<int?>("Posicion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.HasIndex("PistaId");

                    b.ToTable("ListaPistas");
                });

            modelBuilder.Entity("Melodix.Modelos.ListaReproduccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Colaborativa")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Publica")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Sincronizada")
                        .HasColumnType("boolean");

                    b.Property<string>("SpotifyListaId")
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ListasReproduccion");
                });

            modelBuilder.Entity("Melodix.Modelos.Pista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Album")
                        .HasColumnType("text");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<string>("Artista")
                        .HasColumnType("text");

                    b.Property<int?>("ArtistaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duracion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaLanzamiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpotifyPistaId")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlPortada")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Pistas");
                });

            modelBuilder.Entity("Melodix.Modelos.PlanSuscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DuracionMeses")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxCuentas")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PermiteControlExplicito")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric");

                    b.Property<bool>("RequiereVerificacionEstudiante")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PlanesSuscripcion");
                });

            modelBuilder.Entity("Melodix.Modelos.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Suscripciones");
                });

            modelBuilder.Entity("Melodix.Modelos.SuscripcionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("SuscripcionId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SuscripcionUsuarios");
                });

            modelBuilder.Entity("Melodix.Modelos.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Biografia")
                        .HasColumnType("text");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasColumnType("text");

                    b.Property<int>("Rol")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("SpotifyTokenAcceso")
                        .HasColumnType("text");

                    b.Property<string>("SpotifyTokenRefresco")
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioLikeAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLikeAlbums");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioLikeLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ListaId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLikeListas");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioLikePista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PistaId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLikePistas");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioSigue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SeguidoId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeguidorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeguidoId");

                    b.HasIndex("SeguidorId");

                    b.ToTable("UsuarioSigue");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioSigueArtista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioSigueArtistas");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioSigueLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ListaId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioSigueListas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Melodix.Modelos.Album", b =>
                {
                    b.HasOne("Melodix.Modelos.Artista", "Artista")
                        .WithMany("Albumes")
                        .HasForeignKey("ArtistaId");

                    b.Navigation("Artista");
                });

            modelBuilder.Entity("Melodix.Modelos.HistorialEscucha", b =>
                {
                    b.HasOne("Melodix.Modelos.Pista", "Pista")
                        .WithMany("HistorialEscuchas")
                        .HasForeignKey("PistaId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("HistorialEscuchas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Pista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.HistorialLike", b =>
                {
                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("HistorialLikes")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.ListaPista", b =>
                {
                    b.HasOne("Melodix.Modelos.ListaReproduccion", "Lista")
                        .WithMany("ListaPistas")
                        .HasForeignKey("ListaId");

                    b.HasOne("Melodix.Modelos.Pista", "Pista")
                        .WithMany("ListaPistas")
                        .HasForeignKey("PistaId");

                    b.Navigation("Lista");

                    b.Navigation("Pista");
                });

            modelBuilder.Entity("Melodix.Modelos.ListaReproduccion", b =>
                {
                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("ListasReproduccion")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.Pista", b =>
                {
                    b.HasOne("Melodix.Modelos.Album", null)
                        .WithMany("Pistas")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melodix.Modelos.Artista", "ArtistaNav")
                        .WithMany("Pistas")
                        .HasForeignKey("ArtistaId");

                    b.Navigation("ArtistaNav");
                });

            modelBuilder.Entity("Melodix.Modelos.Suscripcion", b =>
                {
                    b.HasOne("Melodix.Modelos.PlanSuscripcion", "Plan")
                        .WithMany("Suscripciones")
                        .HasForeignKey("PlanId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("Suscripciones")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Plan");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.SuscripcionUsuario", b =>
                {
                    b.HasOne("Melodix.Modelos.Suscripcion", "Suscripcion")
                        .WithMany("SuscripcionUsuarios")
                        .HasForeignKey("SuscripcionId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("SuscripcionUsuarios")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Suscripcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioLikeAlbum", b =>
                {
                    b.HasOne("Melodix.Modelos.Album", "Album")
                        .WithMany("UsuarioLikeAlbums")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioLikeAlbums")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Album");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioLikeLista", b =>
                {
                    b.HasOne("Melodix.Modelos.ListaReproduccion", "Lista")
                        .WithMany("UsuarioLikeListas")
                        .HasForeignKey("ListaId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioLikeListas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Lista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioLikePista", b =>
                {
                    b.HasOne("Melodix.Modelos.Pista", "Pista")
                        .WithMany("UsuarioLikePistas")
                        .HasForeignKey("PistaId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioLikePistas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Pista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioSigue", b =>
                {
                    b.HasOne("Melodix.Modelos.Usuario", "Seguido")
                        .WithMany("Seguidores")
                        .HasForeignKey("SeguidoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Melodix.Modelos.Usuario", "Seguidor")
                        .WithMany("Seguidos")
                        .HasForeignKey("SeguidorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Seguido");

                    b.Navigation("Seguidor");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioSigueArtista", b =>
                {
                    b.HasOne("Melodix.Modelos.Artista", "Artista")
                        .WithMany("UsuariosQueSiguen")
                        .HasForeignKey("ArtistaId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioSigueArtistas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Artista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Melodix.Modelos.UsuarioSigueLista", b =>
                {
                    b.HasOne("Melodix.Modelos.ListaReproduccion", "Lista")
                        .WithMany("UsuarioSigueListas")
                        .HasForeignKey("ListaId");

                    b.HasOne("Melodix.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioSigueListas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Lista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melodix.Modelos.Album", b =>
                {
                    b.Navigation("Pistas");

                    b.Navigation("UsuarioLikeAlbums");
                });

            modelBuilder.Entity("Melodix.Modelos.Artista", b =>
                {
                    b.Navigation("Albumes");

                    b.Navigation("Pistas");

                    b.Navigation("UsuariosQueSiguen");
                });

            modelBuilder.Entity("Melodix.Modelos.ListaReproduccion", b =>
                {
                    b.Navigation("ListaPistas");

                    b.Navigation("UsuarioLikeListas");

                    b.Navigation("UsuarioSigueListas");
                });

            modelBuilder.Entity("Melodix.Modelos.Pista", b =>
                {
                    b.Navigation("HistorialEscuchas");

                    b.Navigation("ListaPistas");

                    b.Navigation("UsuarioLikePistas");
                });

            modelBuilder.Entity("Melodix.Modelos.PlanSuscripcion", b =>
                {
                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("Melodix.Modelos.Suscripcion", b =>
                {
                    b.Navigation("SuscripcionUsuarios");
                });

            modelBuilder.Entity("Melodix.Modelos.Usuario", b =>
                {
                    b.Navigation("HistorialEscuchas");

                    b.Navigation("HistorialLikes");

                    b.Navigation("ListasReproduccion");

                    b.Navigation("Seguidores");

                    b.Navigation("Seguidos");

                    b.Navigation("SuscripcionUsuarios");

                    b.Navigation("Suscripciones");

                    b.Navigation("UsuarioLikeAlbums");

                    b.Navigation("UsuarioLikeListas");

                    b.Navigation("UsuarioLikePistas");

                    b.Navigation("UsuarioSigueArtistas");

                    b.Navigation("UsuarioSigueListas");
                });
#pragma warning restore 612, 618
        }
    }
}
